#!/usr/bin/bash

possible_devices=(sda sdb sdc sdd sde sdf sdg sdh)
led_map=(disk1 disk2 disk3 disk4 disk5 disk6 disk7 disk8)
devices=()

# check disk SMART information
CHECK_SMART=true
# roughly 360 seconds by default
smart_pool_interval=3600

diskio_data_r=()
diskio_data_w=()

{ lsmod | grep ledtrig_oneshot ; } || modprobe -v ledtrig_oneshot

sleep 2

for i in "${!led_map[@]}"; do
    led=${led_map[i]} 
    if [[ -d /sys/class/leds/$led ]]; then
        echo oneshot > /sys/class/leds/$led/trigger
        echo 1 > /sys/class/leds/$led/invert
        echo 100 > /sys/class/leds/$led/delay_on
        echo 100 > /sys/class/leds/$led/delay_off
        echo "255 255 255" > /sys/class/leds/$led/color
        dev=${possible_devices[i]}
        if [[ -f /sys/class/block/${dev}/stat ]]; then
            devices+=(${dev})
        else
            # turn off the led if no disk installed on this slot
            echo 0 > /sys/class/leds/$led/brightness
            echo none > /sys/class/leds/$led/trigger
        fi
    fi
done

echo detected SATA drives: ${devices[@]}

let loop_cnt=0
while true; do
    for i in "${!devices[@]}"; do
        dev=${devices[$i]}
        diskio_old_r=${diskio_data_r[$i]}
        diskio_old_w=${diskio_data_w[$i]}

        if [[ ! -f /sys/class/block/${dev}/stat ]]; then
            if [[ -f /sys/class/leds/${led_map[$i]}/color ]]; then 
                echo "255 0 0" > /sys/class/leds/${led_map[$i]}/color
            fi
            continue
        fi

        # check disk health
        cnt=$(($cnt+1))
        cnt=$(($cnt%${smart_pool_interval}))
        if [ "$CHECK_SMART" = true ] && [[ ${cnt} -eq 0 ]]; then
            if [[ -z $(smartctl -H ${dev} | grep SUCCESS) ]]; then
                echo "255 0 0" > /sys/class/leds/${led_map[$i]}/color
                echo Disk failure detected
                continue
            fi
        fi

        diskio_new_r=$(cat /sys/block/${dev}/stat | awk '{ print $1 }')
        diskio_new_w=$(cat /sys/block/${dev}/stat | awk '{ print $4 }')

        if [ "${diskio_old_r}" != "${diskio_new_r}" ] || [ "${diskio_old_w}" != "${diskio_new_w}" ]; then
            echo 1 > /sys/class/leds/${led_map[$i]}/shot
        fi

        diskio_data_r[$i]=$diskio_new_r
        diskio_data_w[$i]=$diskio_new_w
    done

    if [ -f /usr/bin/zpool-leds.sh ]; then
        bash /usr/bin/zpool-leds.sh
    fi

    sleep 0.1

done
